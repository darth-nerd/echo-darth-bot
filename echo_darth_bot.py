

import nest_asyncio
nest_asyncio.apply()

from aiogram import Bot, Dispatcher, executor, types

from my_tokens import API_TOKEN
#from aiogram.types import ReplyKeyboardRemove,\
#    ReplyKeyboardMarkup, KeyboardButton,\
#    InlineKeyboardMarkup, InlineKeyboardButton

import buttons as btn

###########
#Init bot
###########

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)


##########
# Help
##########
@dp.message_handler(commands=['help'])
async def send_help(message: types.Message):
   await message.reply("\
/start - to start conversation\n\
/hi - to get greetings\n\
/line - to get inline buttons\n\
/line2 - to get all inline buttons\n\
/keyboard - to get keybord buttons\n\
/keyboard2 - to get all keyboard buttons\n\
/location - to reqest location/contact\n\
/rm - to clear keyboards\n\
/help - to get this message")




#######
# MAIN COMANDS
#######


@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    
    await message.reply("–ü—Ä–∏–≤–µ—Ç!\n–Ø –≠—Ö–æ-–±–æ—Ç –æ—Ç darth!", reply_markup=btn.start_kb )
 

@dp.message_handler(commands=['hi'])
async def greeting(message: types.Message):
    greet_kb = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True).add(button_hi)
    await message.reply("–ü—Ä–∏–≤–µ—Ç!", reply_markup=btn.greet_kb)


@dp.message_handler(commands=['keyboard'])
async def process_hi5_command(message: types.Message):
    await message.reply("–ü—è—Ç–æ–µ - –¥–æ–±–∞–≤–ª—è–µ–º —Ä—è–¥—ã –∫–Ω–æ–ø–æ–∫", reply_markup=btn.markup3)


@dp.message_handler(commands=['keyboard2'])
async def process_hi7_command(message: types.Message):
    await message.reply("–°–µ–¥—å–º–æ–µ - –≤—Å–µ –º–µ—Ç–æ–¥—ã –≤–º–µ—Å—Ç–µ", reply_markup=btn.markup_big)


@dp.callback_query_handler(lambda c: c.data == 'button1')
async def process_callback_button1(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id, '–ù–∞–∂–∞—Ç–∞ –ø–µ—Ä–≤–∞—è –∫–Ω–æ–ø–∫–∞!')

@dp.message_handler(commands=['line'])
async def process_command_1(message: types.Message):
    await message.reply("–ü–µ—Ä–≤–∞—è –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∞", reply_markup=btn.inline_kb1)


@dp.callback_query_handler(lambda c: c.data and c.data.startswith('btn'))
async def process_callback_kb1btn1(callback_query: types.CallbackQuery):
    code = callback_query.data[-1]
    if code.isdigit():
        code = int(code)
    if code == 2:
        await bot.answer_callback_query(callback_query.id, text='–ù–∞–∂–∞—Ç–∞ –≤—Ç–æ—Ä–∞—è –∫–Ω–æ–ø–∫–∞')
    elif code == 5:
        await bot.answer_callback_query(
            callback_query.id,
            text='–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ —Å –Ω–æ–º–µ—Ä–æ–º 5.\n–ê —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å –¥–ª–∏–Ω–æ–π –¥–æ 200 —Å–∏–º–≤–æ–ª–æ–≤ üòâ', show_alert=True)
    else:
        await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id, f'–ù–∞–∂–∞—Ç–∞ –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∞! code={code}')


@dp.message_handler(commands=['line2'])
async def process_command_2(message: types.Message):
    await message.reply("–û—Ç–ø—Ä–∞–≤–ª—è—é –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –∫–Ω–æ–ø–∫–∏", reply_markup=btn.inline_kb_full)


@dp.message_handler(commands=['location'])
async def process_hi6_command(message: types.Message):
    await message.reply("–®–µ—Å—Ç–æ–µ - –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–Ω—Ç–∞–∫—Ç –∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é\n–≠—Ç–∏ –¥–≤–µ –∫–Ω–æ–ø–∫–∏ –Ω–µ –∑–∞–≤–∏—Å—è—Ç –¥—Ä—É–≥ –æ—Ç –¥—Ä—É–≥–∞", reply_markup=btn.markup_request)

@dp.message_handler(commands=['rm'])
async def process_rm_command(message: types.Message):
    await message.reply("–£–±–∏—Ä–∞–µ–º —à–∞–±–ª–æ–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏–π", reply_markup=btn.ReplyKeyboardRemove())


#######
# Handle other unknown text messages
#######

@dp.message_handler()
async def echo(message: types.Message):
   await message.answer(message.text)


 
if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)#, on_startup=setup_bot_commands)
